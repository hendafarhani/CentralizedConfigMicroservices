#Server port number will receive:
#The value of PORT attribute if it is passed in args
#Otherwise a random port number
server.port=${PORT:0}

#Application's name with which the microservice will be registered
#at eureka discovery service dashboard
spring.application.name=customers

#Url of discovery server
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka

#Enable devtools to restart the server automatically each time there are code updates
spring.devtools.restart.enabled=true


# eureka.instance.instance-id is used to randomly associate
# a different id for each running instance of the same microservice.
# ${spring.application.instance_id:${random.value}} tells that if no instance_id is passed
# then run the microservice with a random value.
# Use the following command to create an instance of the microservice:
#mvn spring-boot:run -Dspring-boot.run.arguments=--spring.application.instance_id=ANY_VALUE_YOU_CHOOSE
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# This property tells the microservice's instance to load at startup, configurations from configserver.
# "optional" is used to tell that the startup must be pursued normally even if the connection
# with configsever is failed.
spring.config.import=optional:configserver:http://localhost:8080

#RabbitMQ's connection credentials
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#Add connection properties to mysql database:
spring.jpa.hibernate.ddl-auto=validate
# ===============================
# FLYWAY
# ===============================
flyway.url=jdbc:mysql://localhost:3306
flyway.schemas=customerDetails
flyway.user=hendafarhani
flyway.password=user


eureka.instance.hostname=localhost